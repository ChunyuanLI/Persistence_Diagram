

setting_up_robust;

num_shapes = length(SHAPES);

% 1. load eigen values
feature1 = [];
str = '';
for s = 1:length(SHAPES), 

    shapename = SHAPES{s};
    str = mprintf(str, '%s', shapename);    
    
    % Load eigendecomposition
    load(fullfile(EVECS_DIR, shapename), 'evals');
    feature1 = [feature1, evals]; 
end    
str = mprintf(str, '\n');  

% 2. compute distance
warning off;
mkdir(DIST_DIR);
warning on;   

fea1 = feature1(1:num_evals_dna,:)';
D = pdist2(fea1,fea1,'euclidean');

fea1_n = feature1(1:num_evals_dna,:)';
D = pdist2(fea1_n,fea1_n,'euclidean');

% 3. Save result
save(fullfile(DIST_DIR, ['distance_shapeDNA' num2str(num_evals_dna) '.mat']), 'D');

% 4. evaluate
fprintf('Weighted combined level partition %dth level performace.\n', num_evals_dna);
compute_shapegoogle_performance(D);

